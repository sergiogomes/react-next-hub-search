{"ast":null,"code":"var _jsxFileName = \"/Users/sergiogomes/Documents/Workfolder/react-next-hub-search/src/components/date/date.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nvar monthMap = {\n  0: \"Jan\",\n  1: \"Feb\",\n  2: \"Mar\",\n  3: \"Apr\",\n  4: \"May\",\n  5: \"Jun\",\n  6: \"Jul\",\n  7: \"Aug\",\n  8: \"Sep\",\n  9: \"Oct\",\n  10: \"Nov\",\n  11: \"Dec\"\n};\n/**\n * Transform ISO date to day and month\n * @param {string} ISOdate ISO date string\n * @example \"2020-09-04T22:12:17Z\" -> 5 Sep\n * @returns string\n */\n\nexport default function DateMonth(_ref) {\n  var ISOdate = _ref.ISOdate;\n\n  try {\n    var date = new Date(ISOdate);\n    var day = date.getUTCDate();\n    var month = monthMap[date.getMonth()];\n    return __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 12\n      }\n    }, \"\".concat(day, \" \").concat(month));\n  } catch (error) {\n    return __jsx(\"small\", {\n      className: \"alert alert-danger mt-2\",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, \"Unexpected error in DateMonth: \".concat(error));\n  }\n}\n_c = DateMonth;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateMonth\");","map":{"version":3,"sources":["/Users/sergiogomes/Documents/Workfolder/react-next-hub-search/src/components/date/date.js"],"names":["monthMap","DateMonth","ISOdate","date","Date","day","getUTCDate","month","getMonth","error"],"mappings":";;;AAAA,IAAMA,QAAQ,GAAG;AACf,KAAG,KADY;AAEf,KAAG,KAFY;AAGf,KAAG,KAHY;AAIf,KAAG,KAJY;AAKf,KAAG,KALY;AAMf,KAAG,KANY;AAOf,KAAG,KAPY;AAQf,KAAG,KARY;AASf,KAAG,KATY;AAUf,KAAG,KAVY;AAWf,MAAI,KAXW;AAYf,MAAI;AAZW,CAAjB;AAeA;;;;;;;AAMA,eAAe,SAASC,SAAT,OAAgC;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAC7C,MAAI;AACF,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,OAAT,CAAb;AACA,QAAMG,GAAG,GAAGF,IAAI,CAACG,UAAL,EAAZ;AACA,QAAMC,KAAK,GAAGP,QAAQ,CAACG,IAAI,CAACK,QAAL,EAAD,CAAtB;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAUH,GAAV,cAAiBE,KAAjB,EAAP;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,WACE;AAAO,MAAA,SAAS,EAAC,yBAAjB;AAA2C,MAAA,IAAI,EAAC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACqCA,KADrC,EADF;AAKD;AACF;KAbuBR,S","sourcesContent":["const monthMap = {\n  0: \"Jan\",\n  1: \"Feb\",\n  2: \"Mar\",\n  3: \"Apr\",\n  4: \"May\",\n  5: \"Jun\",\n  6: \"Jul\",\n  7: \"Aug\",\n  8: \"Sep\",\n  9: \"Oct\",\n  10: \"Nov\",\n  11: \"Dec\",\n};\n\n/**\n * Transform ISO date to day and month\n * @param {string} ISOdate ISO date string\n * @example \"2020-09-04T22:12:17Z\" -> 5 Sep\n * @returns string\n */\nexport default function DateMonth({ ISOdate }) {\n  try {\n    const date = new Date(ISOdate);\n    const day = date.getUTCDate();\n    const month = monthMap[date.getMonth()];\n    return <span>{`${day} ${month}`}</span>;\n  } catch (error) {\n    return (\n      <small className=\"alert alert-danger mt-2\" role=\"alert\">\n        {`Unexpected error in DateMonth: ${error}`}\n      </small>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}